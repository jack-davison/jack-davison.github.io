[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am an Air Quality Measurements Data Analyst and R Developer working for an Environmental Consultancy in Oxfordshire, UK. My main role is the development of R-based tools (dynamic documents, Shiny apps, packages, etc.), and in publicising the potential applications of R within the practice.\nI was awarded a PhD in Atmospheric Chemistry, having studied in the Wolfson Atmospheric Chemistry Laboratories at the University of York, UK. My main research interests were in the remote measurements and modelling of road transport exhaust emissions.\nI’ve been using and refining my R skills over the past five years, with particular attention to the Tidyverse suite of R packages and the openair family for air quality data analysis.\nI have contributed to the #TidyTuesday Project since Summer 2020. My submissions can be found on my GitHub or Twitter.\nIn 2021, I became an RStudio Certified Tidyverse Instructor."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jack Davison R",
    "section": "",
    "text": "tidytuesday\n\n\n\n\nA disucssion on data tidying and cleaning, with applications to a messy, unfamiliar data set.\n\n\n\n\n\n\nFeb 2, 2021\n\n\nJack Davison\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#what-are-the-issues",
    "href": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#what-are-the-issues",
    "title": "An Ode to Data Tidying (TidyTuesday 2021 Week 6: HBCU Enrolment)",
    "section": "What are the issues?",
    "text": "What are the issues?\nLet’s read in the data and give it a look over.\nThe bach_students data set indicates…\n\nThe percentage of students broken down by race/ethnicity, aged 25 and over who have attained a bachelor’s degree.\n\nBut in the form it is in, it is pretty untidy and unclean. Here are some issues I can identify:\n\nOur key variables are effectively year, race, total and standard error, but race is spread over multiple columns (remember - each column should represent a variable, not multiple columns representing one variable).\nAll of the columns should be numbers, but they have read in as characters.\nAsian people and Pacific Islanders are given twice - as a total of the two and individually.\nThe names of the columns have spaces in them, are wordy and therefore generally difficult to use.\nThe Total column represents the year. The name is therefore a bit misleading.\n\nA note on the emboldened item above; in my experience, data “in the wild” that has been put together in Excel typically has baggage like this as spreadsheets are sadly used for both data storage and presentation. This means that totals and the like are given alongside the data used to calculate them. I don’t feel bad about removing data like this as long as we are left with the tools to recalculate them. In this case, we are! If we want to regroup the Asian/Pacific Islander data it’d be as easy as renaming them both as the same thing using mutate() and if_else(), and then group_by() and summarise() to re-calculate the total. It may even be that we want to combine more racial groups using a fct_lump() function."
  },
  {
    "objectID": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#cleaning-and-tidying",
    "href": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#cleaning-and-tidying",
    "title": "An Ode to Data Tidying (TidyTuesday 2021 Week 6: HBCU Enrolment)",
    "section": "Cleaning and Tidying",
    "text": "Cleaning and Tidying\nLet’s start by making sure that all of the data is numeric. dplyr v1.0.0 gave us the across() function that makes this a breeze.\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  head(16)\n\n# A tibble: 16 × 19\n   Total `Total, percent of al…` `Standard Erro…` White1 `Standard Erro…` Black1\n   <dbl>                   <dbl>            <dbl>  <dbl>            <dbl>  <dbl>\n 1  1910                     2.7            NA      NA              NA      NA  \n 2  1920                     3.3            NA      NA              NA      NA  \n 3  1930                     3.9            NA      NA              NA      NA  \n 4  1940                     4.6            NA       4.9            NA       1.3\n 5  1950                     6.2            NA       6.6            NA       2.2\n 6  1960                     7.7            NA       8.1            NA       3.5\n 7  1970                    11              NA      11.6            NA       6.1\n 8  1975                    13.9            NA      14.9            NA       6.4\n 9  1980                    17              -0.16   18.4            -0.18    7.9\n10  1985                    19.4            -0.16   20.8            -0.19   11.1\n11  1986                    19.4            -0.16   20.9            -0.19   10.9\n12  1987                    19.9            -0.16   21.4            -0.19   10.8\n13  1988                    20.3            -0.16   21.8            -0.19   11.2\n14  1989                    21.1            -0.16   22.8            -0.19   11.7\n15  1990                    21.3            -0.16   23.1            -0.19   11.3\n16  1991                    21.4            -0.16   23.3            -0.19   11.5\n# … with 13 more variables: `Standard Errors - Black1` <dbl>, Hispanic <dbl>,\n#   `Standard Errors - Hispanic` <dbl>, `Total - Asian/Pacific Islander` <dbl>,\n#   `Standard Errors - Total - Asian/Pacific Islander` <dbl>,\n#   `Asian/Pacific Islander - Asian` <dbl>,\n#   `Standard Errors - Asian/Pacific Islander - Asian` <dbl>,\n#   `Asian/Pacific Islander - Pacific Islander` <dbl>,\n#   `Standard Errors - Asian/Pacific Islander - Pacific Islander` <dbl>, …\n\n\nWe could be tempted now to run janitor::clean_names(). For those unfamiliar, this function cleans the names of a data frame to make them easier to use - all lower-case, spaces replaced with underscores, and the like. Normally it’s a good idea to use it as soon as possible, but as I am going to restructure my data I am not going to use it right away. As race will be one of my columns, I’d probably want words like “White” and “Black” to remain capitalised, so if I reported them in a table or use them in a legend label they’d look more presentable.\nNext, we can start restructuring. A good trick with pivot_longer() is that it behaves much the same as functions like select() - if we list a column name preceded with a minus sign (-) it effectively tells the function “everything but this column, please!” I’m not going to specify column names for the names or values here as we’ll quickly get rid of them.\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>% \n  head(16)\n\n# A tibble: 16 × 3\n   Total name                                                              value\n   <dbl> <chr>                                                             <dbl>\n 1  1910 \"Total, percent of all persons age 25 and over\"                     2.7\n 2  1910 \"Standard Errors - Total, percent of all persons age 25 and over\"  NA  \n 3  1910 \"White1\"                                                           NA  \n 4  1910 \"Standard Errors - White1\"                                         NA  \n 5  1910 \"Black1\"                                                           NA  \n 6  1910 \"Standard Errors - Black1\"                                         NA  \n 7  1910 \"Hispanic\"                                                         NA  \n 8  1910 \"Standard Errors - Hispanic\"                                       NA  \n 9  1910 \"Total - Asian/Pacific Islander\"                                   NA  \n10  1910 \"Standard Errors - Total - Asian/Pacific Islander\"                 NA  \n11  1910 \"Asian/Pacific Islander - Asian\"                                   NA  \n12  1910 \"Standard Errors - Asian/Pacific Islander - Asian\"                 NA  \n13  1910 \"Asian/Pacific Islander - Pacific Islander\"                        NA  \n14  1910 \"Standard Errors - Asian/Pacific Islander - Pacific Islander\"      NA  \n15  1910 \"American Indian/\\r\\nAlaska Native\"                                NA  \n16  1910 \"Standard Errors - American Indian/\\r\\nAlaska Native\"              NA  \n\n\nNow we can remove that Asian/Pacific Islander total we spoke about earlier. We will use filter() alongside the str_detect() function and the logical operator !.\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  head(16)\n\n# A tibble: 16 × 3\n   Total name                                                              value\n   <dbl> <chr>                                                             <dbl>\n 1  1910 \"Total, percent of all persons age 25 and over\"                     2.7\n 2  1910 \"Standard Errors - Total, percent of all persons age 25 and over\"  NA  \n 3  1910 \"White1\"                                                           NA  \n 4  1910 \"Standard Errors - White1\"                                         NA  \n 5  1910 \"Black1\"                                                           NA  \n 6  1910 \"Standard Errors - Black1\"                                         NA  \n 7  1910 \"Hispanic\"                                                         NA  \n 8  1910 \"Standard Errors - Hispanic\"                                       NA  \n 9  1910 \"Asian/Pacific Islander - Asian\"                                   NA  \n10  1910 \"Standard Errors - Asian/Pacific Islander - Asian\"                 NA  \n11  1910 \"Asian/Pacific Islander - Pacific Islander\"                        NA  \n12  1910 \"Standard Errors - Asian/Pacific Islander - Pacific Islander\"      NA  \n13  1910 \"American Indian/\\r\\nAlaska Native\"                                NA  \n14  1910 \"Standard Errors - American Indian/\\r\\nAlaska Native\"              NA  \n15  1910 \"Two or more race\"                                                 NA  \n16  1910 \"Standard Errors - Two or more race\"                               NA  \n\n\nTo separate the total values from the standard errors we can use the separate() function and the \" - \" string. Issues once again come from the Asian and Pacific Islander data as they have a second \" - \" in them, but this can be straightforwardly removed. For whatever reason, “White” and “Black” are listed with the number one (1) after them, so we can get rid of this while we’re on the subject of cleaning strings.\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  mutate(name = str_remove(name, \"Asian/Pacific Islander - |1\")) %>%\n  head(16)\n\n# A tibble: 16 × 3\n   Total name                                                              value\n   <dbl> <chr>                                                             <dbl>\n 1  1910 \"Total, percent of all persons age 25 and over\"                     2.7\n 2  1910 \"Standard Errors - Total, percent of all persons age 25 and over\"  NA  \n 3  1910 \"White\"                                                            NA  \n 4  1910 \"Standard Errors - White\"                                          NA  \n 5  1910 \"Black\"                                                            NA  \n 6  1910 \"Standard Errors - Black\"                                          NA  \n 7  1910 \"Hispanic\"                                                         NA  \n 8  1910 \"Standard Errors - Hispanic\"                                       NA  \n 9  1910 \"Asian\"                                                            NA  \n10  1910 \"Standard Errors - Asian\"                                          NA  \n11  1910 \"Pacific Islander\"                                                 NA  \n12  1910 \"Standard Errors - Pacific Islander\"                               NA  \n13  1910 \"American Indian/\\r\\nAlaska Native\"                                NA  \n14  1910 \"Standard Errors - American Indian/\\r\\nAlaska Native\"              NA  \n15  1910 \"Two or more race\"                                                 NA  \n16  1910 \"Standard Errors - Two or more race\"                               NA  \n\n\nNow let’s add that separate() step, which we need to give some column names for the name column to turn into, the separating character (space-dash-space), and the direction to fill in (in this case left).\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  mutate(name = str_remove(name, \"Asian/Pacific Islander - |1\")) %>%\n  separate(name, into = c(\"stat\",\"race\"), sep = \" - \", fill = \"left\") %>%\n  head(16)\n\n# A tibble: 16 × 4\n   Total stat            race                                            value\n   <dbl> <chr>           <chr>                                           <dbl>\n 1  1910 <NA>            \"Total, percent of all persons age 25 and over\"   2.7\n 2  1910 Standard Errors \"Total, percent of all persons age 25 and over\"  NA  \n 3  1910 <NA>            \"White\"                                          NA  \n 4  1910 Standard Errors \"White\"                                          NA  \n 5  1910 <NA>            \"Black\"                                          NA  \n 6  1910 Standard Errors \"Black\"                                          NA  \n 7  1910 <NA>            \"Hispanic\"                                       NA  \n 8  1910 Standard Errors \"Hispanic\"                                       NA  \n 9  1910 <NA>            \"Asian\"                                          NA  \n10  1910 Standard Errors \"Asian\"                                          NA  \n11  1910 <NA>            \"Pacific Islander\"                               NA  \n12  1910 Standard Errors \"Pacific Islander\"                               NA  \n13  1910 <NA>            \"American Indian/\\r\\nAlaska Native\"              NA  \n14  1910 Standard Errors \"American Indian/\\r\\nAlaska Native\"              NA  \n15  1910 <NA>            \"Two or more race\"                               NA  \n16  1910 Standard Errors \"Two or more race\"                               NA  \n\n\nYou’ll notice that in the stats column we have some NA values that actually correspond to the “total” stat, so we’ll fill those in using a tidyr function, replace_na().\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  mutate(name = str_remove(name, \"Asian/Pacific Islander - |1\")) %>%\n  separate(name, into = c(\"stat\",\"race\"), sep = \" - \", fill = \"left\") %>%\n  mutate(stat = replace_na(stat, \"Total\")) %>%\n  head(16)\n\n# A tibble: 16 × 4\n   Total stat            race                                            value\n   <dbl> <chr>           <chr>                                           <dbl>\n 1  1910 Total           \"Total, percent of all persons age 25 and over\"   2.7\n 2  1910 Standard Errors \"Total, percent of all persons age 25 and over\"  NA  \n 3  1910 Total           \"White\"                                          NA  \n 4  1910 Standard Errors \"White\"                                          NA  \n 5  1910 Total           \"Black\"                                          NA  \n 6  1910 Standard Errors \"Black\"                                          NA  \n 7  1910 Total           \"Hispanic\"                                       NA  \n 8  1910 Standard Errors \"Hispanic\"                                       NA  \n 9  1910 Total           \"Asian\"                                          NA  \n10  1910 Standard Errors \"Asian\"                                          NA  \n11  1910 Total           \"Pacific Islander\"                               NA  \n12  1910 Standard Errors \"Pacific Islander\"                               NA  \n13  1910 Total           \"American Indian/\\r\\nAlaska Native\"              NA  \n14  1910 Standard Errors \"American Indian/\\r\\nAlaska Native\"              NA  \n15  1910 Total           \"Two or more race\"                               NA  \n16  1910 Standard Errors \"Two or more race\"                               NA  \n\n\nNow we can pivot_wider() to get the total values and the standard errors in their own columns. We’ll have to rename the existing Total column first, but that can be achieved using dplyr’s rename().\n\nbach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  mutate(name = str_remove(name, \"Asian/Pacific Islander - |1\")) %>%\n  separate(name, into = c(\"stat\",\"race\"), sep = \" - \", fill = \"left\") %>%\n  mutate(stat = replace_na(stat, \"Total\")) %>%\n  rename(year = Total) %>%\n  pivot_wider(names_from = stat, values_from = value) %>%\n  head(8)\n\n# A tibble: 8 × 4\n   year race                                            Total `Standard Errors`\n  <dbl> <chr>                                           <dbl>             <dbl>\n1  1910 \"Total, percent of all persons age 25 and over\"   2.7                NA\n2  1910 \"White\"                                          NA                  NA\n3  1910 \"Black\"                                          NA                  NA\n4  1910 \"Hispanic\"                                       NA                  NA\n5  1910 \"Asian\"                                          NA                  NA\n6  1910 \"Pacific Islander\"                               NA                  NA\n7  1910 \"American Indian/\\r\\nAlaska Native\"              NA                  NA\n8  1910 \"Two or more race\"                               NA                  NA\n\n\nThe data is now tidy! We can do some additional cleaning steps now - there seems to be something odd going on with the American Indian/Alaska Native string, and the “Total” string is a bit wordy. Let’s sort that out, and finally throw in that janitor function I talked about right at the beginning.\n\ndf = bach_students %>%\n  mutate(across(.cols = where(is.character), \n                .fns = parse_number)) %>%\n  pivot_longer(-Total) %>%\n  filter(!str_detect(name, \"Total - Asian/Pacific Islander\")) %>%\n  mutate(name = str_remove(name, \"Asian/Pacific Islander - |1\")) %>%\n  separate(name, into = c(\"stat\",\"race\"), sep = \" - \", fill = \"left\") %>%\n  mutate(stat = replace_na(stat, \"Total\")) %>%\n  rename(year = Total) %>%\n  pivot_wider(names_from = stat, values_from = value) %>%\n  janitor::clean_names() %>%\n  mutate(\n    race = str_remove_all(\n      race, \n      \", percent of all persons age 25 and over|\\r\\n\")\n  )\n\ndf %>% head(8)\n\n# A tibble: 8 × 4\n   year race                          total standard_errors\n  <dbl> <chr>                         <dbl>           <dbl>\n1  1910 Total                           2.7              NA\n2  1910 White                          NA                NA\n3  1910 Black                          NA                NA\n4  1910 Hispanic                       NA                NA\n5  1910 Asian                          NA                NA\n6  1910 Pacific Islander               NA                NA\n7  1910 American Indian/Alaska Native  NA                NA\n8  1910 Two or more race               NA                NA\n\n\nWe did it! The data is now clean and tidy and ready to use. Let’s do a bit of analysis just to demonstrate how straightforward it is to use now."
  },
  {
    "objectID": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#data-analysis",
    "href": "posts/2021-02-02-tidytuesday-2021-week-6-hbcu-enrollment-an-ode-to-data-cleaning/index.html#data-analysis",
    "title": "An Ode to Data Tidying (TidyTuesday 2021 Week 6: HBCU Enrolment)",
    "section": "Data Analysis",
    "text": "Data Analysis\nWe can create some cool plots now we have access to this data. We can start with a simple timeseries.\n\ntheme_set(theme_light())\n\nplot_data = df %>%\n  drop_na() %>%\n  mutate(across(total:standard_errors, ~.x/100))\n\nplot_data %>%\n  filter(race != \"Total\") %>%\n  mutate(race = fct_reorder(race, total, max, na.rm = T),\n         race = fct_rev(race)) %>%\n  ggplot(aes(\n    year,\n    y = total,\n    ymax = total + standard_errors,\n    ymin = total - standard_errors,\n    group = race\n  )) +\n  geom_ribbon(aes(fill = race), alpha = .25) +\n  geom_line(aes(color = race)) +\n  geom_line(data = filter(plot_data, race == \"Total\"), size = 2) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Year\", y = NULL, color = \"Race\", fill = \"Race\",\n       title = \"Bachelor's Degree Attainment\",\n       subtitle = \"The percentage of the population who have achieved a\\nbachelor's degree in the US since 1980, split into racial groups.\\nThe bold line represents the total population.\") +\n  theme(plot.title.position = \"plot\")\n\n\n\n\nOr we could just focus in on the most recent data.\n\nplot_data_2 = plot_data %>%\n  filter(year == max(year)) %>%\n  mutate(race = fct_reorder(race, total))\n\ntot = plot_data_2 %>%\n  filter(race == \"Total\") %>% \n  pull(total)\n\nplot_data_2 %>%\n  mutate(flag = case_when(race == \"Total\" ~ \"T\",\n                          total > tot ~ \"Y\",\n                          total < tot ~ \"X\")) %>%\n  ggplot(aes(y = race, x = total, xmax = total+standard_errors, xmin = total-standard_errors, fill = flag)) +\n  geom_col(show.legend = F) +\n  geom_vline(xintercept = tot, size = 1) +\n  geom_pointrange(show.legend = F) +\n  scale_x_continuous(expand = expansion(mult = c(0,.1)), \n                     labels = scales::percent) +\n  labs(y = NULL, x = \"Bachelor's Degree Attainment in 2016\")\n\n\n\n\n\nplot_data_2 %>%\n  janitor::remove_constant() %>%\n  mutate(mutate(across(\n    where(is.numeric), ~ glue::glue(\"{abs(.x) * 100} %\")\n  ))) %>%\n  knitr::kable(col.names = c(\"Race\", \"Total\", \"Std Err.\")) %>%\n  kableExtra::kable_styling()\n\n\n\n\n Race \n    Total \n    Std Err. \n  \n\n\n Total \n    33.4 % \n    0.24 % \n  \n\n White \n    37.3 % \n    0.31 % \n  \n\n Black \n    23.5 % \n    0.46 % \n  \n\n Hispanic \n    16.4 % \n    0.4 % \n  \n\n Asian \n    56.4 % \n    0.89 % \n  \n\n Pacific Islander \n    27.5 % \n    2.92 % \n  \n\n American Indian/Alaska Native \n    16.8 % \n    1.39 % \n  \n\n Two or more race \n    30.6 % \n    1.52 % \n  \n\n\n\n\nSee how easy it is to use this data now? Incredible!"
  }
]